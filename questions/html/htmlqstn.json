[
  {
    "Id": "d6lp0kt8cd",
    "question": "What is difference between HTML and XHTML?",
    "answer": "The Extensible Hypertext Markup Language, or XHTML, has two important notes for front end developers.",
    "codeTrue": false,
    "codes": [{ "codeHead": "", "code": "", "language": "markup" }],
    "bulletsTrue": true,
    "bullets": [
      "It needs to be well formed, meaning all elements need to be closed and nested correctly or you will return errors.",
      "Since it is more strict than HTML is requires less pre-processing by the browser, which may improve your sites performance."
    ],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }]
  },
  {
    "Id": "d6lp0kt8cd",
    "question": "What are the building blocks of HTML5?",
    "answer": "The are the following building blocks of HTML5",
    "codeTrue": false,
    "codes": [{ "codeHead": "", "code": "", "language": "markup" }],
    "bulletsTrue": true,
    "bullets": [
      "Semantics :- allowing you to describe more precisely what your content is.",
      "Connectivity :- allowing you to communicate with the server in new and innovative ways.",
      "Offline and storage :- allowing webpages to store data on the client-side locally and operate offline more efficiently.",
      "Multimedia :- making video and audio first-class citizens in the Open Web.",
      "2D/3D graphics and effects :- allowing a much more diverse range of presentation options.",
      "Performance and integration :- providing greater speed optimization and better usage of computer hardware.",
      "Device access :- allowing for the usage of various input and output devices.",
      "Styling :- letting authors write more sophisticated themes."
    ],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }]
  },
  {
    "Id": "d6lp0kt8cd",
    "question": "What are the semantic tags available in html5?",
    "answer": "HTML5 semantic tags define the function and the category of your text, simplifying the work for browsers and search engines, as well as developers.\n\nHTML5 offers new semantic elements to define different parts of a web page:",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Syntax to follow",
        "code": "<header></header>\n<section>\n  <article>\n    <figure>\n      <img />\n      <figcaption></figcaption>\n    </figure>\n  </article>\n</section>\n<footer></footer>",
        "language": "markup"
      }
    ],
    "bulletsTrue": true,
    "bullets": [
      "<article>",
      "<aside>",
      "<details>",
      "<figcaption>",
      "<figure>",
      "<footer>",
      "<header>",
      "<main>",
      "<mark>",
      "<nav>",
      "<section>",
      "<summary>",
      "<time>"
    ],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }]
  },
  {
    "Id": "d6lp0kt8cd",
    "question": "Why you would like to use semantic tag?",
    "answer": "We Should use Semantic tags because of the following points below.",
    "codeTrue": false,
    "codes": [{ "codeHead": "", "code": "", "language": "markup" }],
    "bulletsTrue": true,
    "bullets": [
      "Search Engine Optimization, accessibility, repurposing, light code.",
      "Many visually impaired person rely on browser speech and semantic tag helps to interpret page content clearly.",
      "Search engine needs to understand page content to rank and semantic tag helps.",
      "Semantic code aids accessibility. Specially, many people whose eyes are not good rely on speech browsers to read pages to them. These programs cannot interpret pages very well unless they are clearly explained.",
      "Help Search engines to better understand pages. Search engine need to understand what your content is about when rank you properly on search engines. Semantic code tends to improve your placement on search engines, as it is easier for the \"search engine spiders\" to understand.",
      "It's easier to read and edit, which saves time and money during maintenance."
    ],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }]
  },
  {
    "Id": "d6lp0kt8cd",
    "question": "What does a <DOCTYPE html> do?",
    "answer": "A DOCTYPE is always associated to a DTD ( Document Type Definition ). A DTD defines how documents of a certain type should be structured (i.e. a button can contain a span but not a div), whereas a DOCTYPE declares what DTD a document supposedly respects (i.e. this document respects the HTML DTD). For webpages, the DOCTYPE declaration is required. It is used to tell user agents what version of the HTML specifications your document respects.\n\nOnce a user agent has recognized a correct DOCTYPE, it will trigger the no-quirks mode matching this DOCTYPE forreading the document. If a user agent doesn't recognize a correct DOCTYPE, it will trigger the quirks mode.",
    "codeTrue": false,
    "codes": [{ "codeHead": "", "code": "", "language": "markup" }],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }]
  },
  {
    "Id": "d6lp0kt8cd",
    "question": "What happens when DOCTYPE is not given?",
    "answer": "The web page is rendered in quirks mode. The web browsers engines use quirks mode to support older browsers which does not follow the W3C specifications. In quirks mode CSS class and id names are case insensitive. In standards mode they are case sensitive.",
    "codeTrue": false,
    "codes": [{ "codeHead": "", "code": "", "language": "markup" }],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }]
  },
  {
    "Id": "d6lp0kt8cd",
    "question": "What are the new form elements in HTML5?",
    "answer": "There are five new form elements in the HTML5 forms specification: <datalist>, <output>, <progress>, and <meter>.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Datalist Tag :\nAllows to attach a list of suggestions to a text input element. As soon as the user begins to type in the text field, the list of suggestions appears and the user can choose from the suggestions with the mouse.",
        "code": "<p>Enter your favorite browser name:</p>\n<input type=\"text\" list=\"browsers\" name=\"favorite_browser\" />\n<datalist id=\"browsers\">\n  <option value=\"Firefox\"></option>\n  <option value=\"Chrome\"></option>\n  <option value=\"Internet Explorer\"></option>\n  <option value=\"Opera\"></option>\n  <option value=\"Safari\"></option>\n</datalist>",
        "language": "markup"
      },
      {
        "codeHead": "Meter Tag :\nIndicates a numeric value that falls within a range. The tag supports a number of attributes: value: If you don't specify a value, the first numeric value inside the <meter></meter> pair becomes the value.\nIt has attributes like (max), (min), (high), (low) & optimum.\nThis attributes decides the range of the value.",
        "code": "<p>Disk Usage: <meter value=\"0.2\">20%</meter></p>\n<p>Total Score: <meter value=\"6\" min=\"0\" max=\"10\">6 out of 10</meter></p>\n<p>\n  Pollution Level:\n  <meter low=\"60\" high=\"80\" max=\"100\" value=\"85\">Very High</meter>\n</p>",
        "language": "markup"
      },
      {
        "codeHead": "Output Tag :\nIt indicates a section of the page that can be modified by a script (usually JavaScript).",
        "code": "<form oninput=\"result.value=parseInt(a.value)+parseInt(b.value)\">\n  <input type=\"range\" id=\"a\" value=\"50\" /> +\n  <input type=\"number\" id=\"b\" value=\"100\" /> =\n  <output name=\"result\" for=\"a b\"></output>\n</form>",
        "language": "markup"
      },
      {
        "codeHead": "Progress Tag :\nIndicates how much of a task has been completed (often marked as a percentage). It is expected to be modified through JavaScript code.",
        "code": "<p>\n  Progress: <progress id=\"bar\" value=\"0\" max=\"100\"><span>0</span>%</progress>\n</p>\n<script type=\"text/javascript\">\n  var i = 0;\n  var progressBar = document.getElementById(\"bar\");\n  function countNumbers() {\n    if (i < 100) {\n      i = i + 1;\n      progressBar.value = i;\n      // For browsers that don't support progress tag\n      progressBar.getElementsByTagName(\"span\")[0].textContent = i;\n    }\n    // Wait for sometime before running this script again\n    setTimeout(\"countNumbers()\", 100);\n  }\n  countNumbers();\n</script>",
        "language": "markup"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }]
  },
  {
    "Id": "d6lp0kt8cd",
    "question": "How many new form elements are introduced in html5?",
    "answer": "These are the following form elements introduced in html5",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Example:",
        "code": "<input type=\"color\" value=\"#b97a57\" />\n<input type=\"date\" value=\"2020-06-08\" />\n<input type=\"datetime\" value=\"2020-06-09T20:35:34.32\" />\n<input type=\"datetime-local\" value=\"2020-06-09T22:41\" />\n<input type=\"email\" value=\"robert@robertnyman.com\" />\n<input type=\"month\" value=\"2020-06\" />\n<input type=\"number\" value=\"4\" />\n<input type=\"range\" value=\"15\" />\n<!-- Note: If not set, default attribute values are min=\"0\", max=\"100\", step=\"1\". -->\n<input type=\"search\" value=\"[Any search text]\" />\n<input type=\"tel\" value=\"[Any numeric value]\" />\n<!-- Note: Most web browsers seem to let through any value at this time. -->\n<input type=\"time\" value=\"22:38\" />\n<input type=\"url\" value=\"https://www.google.com/\" />\n<!-- Note: requires a protocol like http://, ftp:// etc in the beginning. -->\n<input type=\"week\" value=\"2020-W24\" />",
        "language": "markup"
      }
    ],
    "bulletsTrue": true,
    "bullets": [
      "color :- Gives the end user a native color picker to choose a color.",
      "date :- Offers a datepicker.",
      "datetime :- An element to choose both date and time.",
      "datetime-local :- An element to choose both date and time, with local settings support.",
      "email :- A field for entering e-mail address(es)",
      "month :- Choose a full month.",
      "number :- Picking a number.",
      "range :- Offers a slider to set to a certain value/position.",
      "search :- A field for search queries.",
      "tel :- Choosing a telephone number.",
      "time :- Input a certain time.",
      "url :- Entering a URL.",
      "week :- Picking a specific week."
    ],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }]
  },
  {
    "Id": "d6lp0kt8cd",
    "question": "What is difference between span tag and div tag?",
    "answer": "The primary difference between div and span tag is their default behavior. By default, a <div> is a block-level-element and a <span> is an inline element.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Example:",
        "code": "<div>Demo Text, with <span>some other</span> text.</div>",
        "language": "markup"
      }
    ],
    "bulletsTrue": true,
    "bullets": [
      "<div> is a block level element which means it will render it on it's own line with a width of a 100% of the parent element.",
      "<span> is an inline element which means it will render on the same line as the previous element, if it is also an inline element, and it's width will be determined by it's content."
    ],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }]
  },
  {
    "Id": "d6lp0kt8cd",
    "question": "How does the browser rendering engine work?",
    "answer": "In order to render content the browser has to go through a series of steps:",
    "codeTrue": false,
    "codes": [{ "codeHead": "", "code": "", "language": "markup" }],
    "bulletsTrue": true,
    "bullets": [
      "Document Object Model(DOM)",
      "CSS object model(CSSOM)",
      "Render Tree",
      "Layout",
      "Paint"
    ],
    "imageTrue": true,
    "images": [
      {
        "imageHead": "Detailed Flow chart",
        "image": "https://rahulnk04.github.io/myapi-v1/questions/images/layers-browser.png"
      }
    ]
  },
  {
    "Id": "d6lp0kt8cd",
    "question": "What are optional closing tag?",
    "answer": "<p>, <li>, <td>, <tr>, <th>, <html>, <body>, etc. don't have to provide end tag. Whenever browser hits a new tag it automatically ends the previous tag.",
    "codeTrue": false,
    "codes": [{ "codeHead": "", "code": "", "language": "markup" }],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }]
  },
  {
    "Id": "d6lp0kt8cd",
    "question": "What is a self closing tag?",
    "answer": "In HTML5 it is not strictly necessary to close certain HTML tags. The tags that aren't required to have specific closing tags are called “self closing” tags.\n\nAn example of a self closing tag is something like a line break (<br />) or the meta tag (<meta>). This means that the following are both acceptable:",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Example",
        "code": "<meta charset=\"UTF-8\">\n<meta charset=\"UTF-8\" />\n<br>\n<br/>\n<hr>\n<hr/>",
        "language": "markup"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }]
  },
  {
    "Id": "d6lp0kt8cd",
    "question": "Explain the difference between block elements and inline elements?",
    "answer": "In HTML5 it is not strictly necessary to close certain HTML tags. The tags that aren't required to have specific closing tags are called “self closing” tags.\n\nAn example of a self closing tag is something like a line break (<br />) or the meta tag (<meta>). This means that the following are both acceptable:",
    "codeTrue": false,
    "codes": [{ "codeHead": "", "code": "", "language": "markup" }],
    "bulletsTrue": true,
    "bullets": [
      "block elements :- <h1>, <p>, <ul>, <ol>, <li>,",
      "inline elements :- <span>, <a>, <strong>, <i>, <img>"
    ],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }]
  }
]
