[
  {
    "Id": "d65d0ec8cd",
    "question": "What are the possible ways to create objects in JavaScript",
    "answer": "There are many ways to create objects in javascript as below",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Object constructor: The simplest way to create an empty object is using the Object constructor. Currently this approach is not recommended.",
        "code": "var object = new Object();"
      },
      {
        "codeHead": "Object's create method: The create method of Object creates a new object by passing the prototype object as a parameter",
        "code": "var object = Object.create(null);"
      },
      {
        "codeHead": "Object literal syntax: The object literal syntax (or object initializer), is a comma-separated set of name-value pairs wrapped in curly braces.",
        "code": "var object = {\n     name: \"Rahul Ranjan Nayak\"\n     age: 34\n};\n\nObject literal property values can be of any data type, including array, function, and nested object."
      },
      {
        "codeHead": "Function constructor: Create any function and apply the new operator to create object instances,",
        "code": "function Person(name) {\n  this.name = name;\n  this.age = 21;\n}\nvar object = new Person(\"Rahul Ranjan Nayak\");"
      },
      {
        "codeHead": "Function constructor with prototype: This is similar to function constructor but it uses prototype for their properties and methods,",
        "code": "function Person() {}\nPerson.prototype.name = \"Rahul Ranjan Nayak\";\nvar object = new Person();\n//This is equivalent to an instance created with an object create method with a function prototype and then call that function with an instance and parameters as arguments.\n\nfunction func {};\n\nnew func(x, y, z);"
      },
      {
        "codeHead": "ES6 Class syntax: ES6 introduces class feature to create the objects",
        "code": "class Person {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nvar object = new Person(\"Rahul Ranjan Nayak\");"
      },
      {
        "codeHead": "Singleton pattern: A Singleton is an object which can only be instantiated one time. Repeated calls to its constructor return the same instance and this way one can ensure that they don't accidentally create multiple instances.",
        "code": "var object = new (function () {\n  this.name = \"Rahul Ranjan Nayak\";\n})();"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ]
  },
  {
    "Id": "d65d0ec8cd",
    "question": "What is a prototype chain",
    "answer": "Prototype chaining is used to build new types of objects based on existing ones. It is similar to inheritance in a class based language.",
    "codeTrue": false,
    "codes": [
      {
        "codeHead": "",
        "code": ""
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": true,
    "images": [
      {
        "imageHead": "The prototype on object instance is available through Object.getPrototypeOf(object) or **proto** property whereas prototype on constructors function is available through Object.prototype.",
        "image": "https://rahulnk04.github.io/myapi-v1/questions/images/prototype_chain.png"
      }
    ]
  },
  {
    "Id": "d65d0ec8cd",
    "question": "What is the difference between Call, Apply and Bind",
    "answer": "The difference between Call, Apply and Bind can be explained with below examples.\nCall and apply are pretty interchangeable. Both execute the current function immediately. You need to decide whether itâ€™s easier to send in an array or a comma separated list of arguments. You can remember by treating Call is for comma (separated list) and Apply is for Array.\nWhereas Bind creates a new function that will have this set to the first parameter passed to bind().",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Call: The call() method invokes a function with a given this value and arguments provided one by one",
        "code": "var employee1 = { firstName: \"Rahul\", lastName: \"Nayak\" };\nvar employee2 = { firstName: \"Rohit\", lastName: \"Nath\" };\nvar employee3 = { firstName: \"Rohan\", lastName: \"Nayak\" }\nvar employee4 = { firstName: \"Suchismita\", lastName: \"Sahoo\" }\nvar employee5 = { firstName: \"Nikita\", lastName: \"Khuntia\" }\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.call(employee1, \"Hello\", \"How are you?\"); // Hello Rahul Nayak, How are you?\ninvite.call(employee2, \"Hello\", \"How are you?\"); // Hello Rohit Nath, How are you?\ninvite.call(employee1, \"Hello\", \"How are you?\"); // Hello Rohan Nayak, How are you?\ninvite.call(employee2, \"Hello\", \"How are you?\"); // Hello Suchismita Sahoo, How are you?\ninvite.call(employee1, \"Hello\", \"How are you?\"); // Hello Nikita Khuntia, How are you?"
      },
      {
        "codeHead": "Apply: Invokes the function with a given this value and allows you to pass in arguments as an array",
        "code": "var employee1 = { firstName: \"Rahul\", lastName: \"Nayak\" };\nvar employee2 = { firstName: \"Rohit\", lastName: \"Nath\" };\nvar employee3 = { firstName: \"Rohan\", lastName: \"Nayak\" }\nvar employee4 = { firstName: \"Suchismita\", lastName: \"Sahoo\" }\nvar employee5 = { firstName: \"Nikita\", lastName: \"Khuntia\" }\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.apply(employee1, [\"Hello\", \"How are you?\"]); // Hello Rahul Nayak, How are you?\ninvite.apply(employee2, [\"Hello\", \"How are you?\"]); // Hello Rohit Nath, How are you?\ninvite.apply(employee1, [\"Hello\", \"How are you?\"]); // Hello Rohan Nayak, How are you?\ninvite.apply(employee2, [\"Hello\", \"How are you?\"]); // Hello Suchismita Sahoo, How are you?\ninvite.apply(employee1, [\"Hello\", \"How are you?\"]); // Hello Nikita Khuntia, How are you?"
      },
      {
        "codeHead": "bind: returns a new function, allowing you to pass any number of arguments",
        "code": "var employee1 = { firstName: \"Rahul\", lastName: \"Nayak\" };\nvar employee2 = { firstName: \"Rohit\", lastName: \"Nath\" };\nvar employee3 = { firstName: \"Rohan\", lastName: \"Nayak\" }\nvar employee4 = { firstName: \"Suchismita\", lastName: \"Sahoo\" }\nvar employee5 = { firstName: \"Nikita\", lastName: \"Khuntia\" }\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\nvar inviteEmployee1 = invite.bind(employee1);\nvar inviteEmployee2 = invite.bind(employee2);\nvar inviteEmployee3 = invite.bind(employee3);\nvar inviteEmployee4 = invite.bind(employee4);\nvar inviteEmployee5 = invite.bind(employee5);\ninviteEmployee1(\"Hello\", \"How are you?\"); // Hello Rahul Nayak, How are you?\ninviteEmployee2(\"Hello\", \"How are you?\"); // Hello Rohit Nath, How are you?\ninviteEmployee3(\"Hello\", \"How are you?\"); // Hello Rohan Nayak, How are you?\ninviteEmployee4(\"Hello\", \"How are you?\"); // Hello Suchismita Sahoo, How are you?\ninviteEmployee5(\"Hello\", \"How are you?\"); // Hello Nikita Khuntia, How are you?"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ]
  },
  {
    "Id": "d65d0ec8cd",
    "question": "What is JSON and its common operations",
    "answer": "JSON is a text-based data format following JavaScript object syntax, which was popularized by Douglas Crockford. It is useful when you want to transmit data across a network and it is basically just a text file with an extension of .json, and a MIME type of application/json",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Parsing: Converting a string to a native object",
        "code": "JSON.parse(text);"
      },
      {
        "codeHead": "Stringification: converting a native object to a string so it can be transmitted across the network",
        "code": "JSON.stringify(object);"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ]
  },
  {
    "Id": "d65d0ec8cd",
    "question": "What is the purpose of the array slice method",
    "answer": "The slice() method returns the selected elements in an array as a new array object. It selects the elements starting at the given start argument, and ends at the given optional end argument without including the last element. If you omit the second argument then it selects till the end.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Some of the examples of this method are,",
        "code": "let arrayIntegers = [1, 2, 3, 4, 5];\nlet arrayIntegers1 = arrayIntegers.slice(0, 2); // returns [1,2]\nlet arrayIntegers2 = arrayIntegers.slice(2, 3); // returns [3]\nlet arrayIntegers3 = arrayIntegers.slice(4); //returns [5]"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ]
  },
  {
    "Id": "d65d0ec8cd",
    "question": "What is the purpose of the array splice method",
    "answer": "The splice() method is used either adds/removes items to/from an array, and then returns the removed item. The first argument specifies the array position for insertion or deletion whereas the optional second argument indicates the number of elements to be deleted. Each additional argument is added to the array.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Some of the examples of this method are,\nNote: Splice method modifies the original array and returns the deleted array.",
        "code": "let arrayIntegersOriginal1 = [1, 2, 3, 4, 5];\nlet arrayIntegersOriginal2 = [1, 2, 3, 4, 5];\nlet arrayIntegersOriginal3 = [1, 2, 3, 4, 5];\n\nlet arrayIntegers1 = arrayIntegersOriginal1.splice(0, 2); // returns [1, 2]; original array: [3, 4, 5]\nlet arrayIntegers2 = arrayIntegersOriginal2.splice(3); // returns [4, 5]; original array: [1, 2, 3]\nlet arrayIntegers3 = arrayIntegersOriginal3.splice(3, 1, \"a\", \"b\", \"c\"); //returns [4]; original array: [1, 2, 3, \"a\", \"b\", \"c\", 5]"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ]
  },
  {
    "Id": "d65d0ec8cd",
    "question": "What is the difference between slice and splice",
    "answer": "Some of the major difference are",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Slice",
        "code": "Slice\nDoesn't modify the original array(immutable)\t\nReturns the subset of original array\t\nUsed to pick the elements from array"
      },
      {
        "codeHead": "Splice",
        "code": "Splice\nModifies the original array(mutable)\nReturns the deleted elements as array\nUsed to insert or delete elements to/from array"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ]
  },
  {
    "Id": "d65d0ec8cd",
    "question": "How do you compare Object and Map",
    "answer": "Objects are similar to Maps in that both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. Due to this reason, Objects have been used as Maps historically. But there are important differences that make using a Map preferable in certain cases.",
    "codeTrue": false,
    "codes": [
      {
        "codeHead": "",
        "code": ""
      }
    ],
    "bulletsTrue": true,
    "bullets": [
      "The keys of an Object are Strings and Symbols, whereas they can be any value for a Map, including functions, objects, and any primitive.",
      "The keys in Map are ordered while keys added to Object are not. Thus, when iterating over it, a Map object returns keys in order of insertion.",
      "You can get the size of a Map easily with the size property, while the number of properties in an Object must be determined manually.",
      "A Map is an iterable and can thus be directly iterated, whereas iterating over an Object requires obtaining its keys in some fashion and iterating over them.",
      "An Object has a prototype, so there are default keys in the map that could collide with your keys if you're not careful. As of ES5 this can be bypassed by using map = Object.create(null), but this is seldom done",
      "A Map may perform better in scenarios involving frequent addition and removal of key pairs"
    ],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ]
  },
  {
    "Id": "d65d0ec8cd",
    "question": "What is the difference between == and === operators",
    "answer": "JavaScript provides both strict(===, !==) and type-converting(==, !=) equality comparison. The strict operators take type of variable in consideration, while non-strict operators make type correction/conversion based upon values of variables. The strict operators follow the below conditions for different types,",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Some of the example which covers the above cases,",
        "code": "0 == false   // true\n0 === false  // false\n1 == \"1\"     // true\n1 === \"1\"    // false\nnull == undefined // true\nnull === undefined // false\n'0' == false // true\n'0' === false // false\n[]==[] or []===[] //false, refer different objects in memory\n{}=={} or {}==={} //false, refer different objects in memory"
      }
    ],
    "bulletsTrue": true,
    "bullets": [
      "Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.",
      "Two numbers are strictly equal when they are numerically equal. i.e, Having the same number value. There are two special cases in this,\n    a.  NaN is not equal to anything, including NaN.\n    b.  Positive and negative zeros are equal to one another.",
      "Two Boolean operands are strictly equal if both are true or both are false",
      "Two objects are strictly equal if they refer to the same Object.",
      "Null and Undefined types are not equal with ===, but equal with ==. i.e, null===undefined --> false but null==undefined --> true"
    ],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ]
  },
  {
    "Id": "d65d0ec8cd",
    "question": "What are lambda or arrow functions",
    "answer": "An arrow function is a shorter syntax for a function expression and does not have its own this, arguments, super, or new.target. These functions are best suited for non-method functions, and they cannot be used as constructors.",
    "codeTrue": false,
    "codes": [
      {
        "codeHead": "",
        "code": ""
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ]
  },
  {
    "Id": "d65d0ec8cd",
    "question": "What is a first class function",
    "answer": "In Javascript, functions are first class objects. First-class functions means when functions in that language are treated like any other variable.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "For example, in such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable. For example, in the below example, handler functions assigned to a listener",
        "code": "const handler = () => console.log(\"This is a click handler function\");\ndocument.addEventListener(\"click\", handler);"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ]
  },
  {
    "Id": "d65d0ec8cd",
    "question": "What is a first order function",
    "answer": "First-order function is a function that doesnâ€™t accept another function as an argument and doesnâ€™t return a function as its return value.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "For example",
        "code": "const firstOrder = () => console.log(\"I am a first order function!\");"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ]
  },
  {
    "Id": "d65d0ec8cd",
    "question": "What is a higher order function",
    "answer": "Higher-order function is a function that accepts another function as an argument or returns a function as a return value or both.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "For example",
        "code": "const firstOrderFunc = () =>\n  console.log(\"Hello, I am a First order function\");\nconst higherOrder = (ReturnFirstOrderFunc) => ReturnFirstOrderFunc();\nhigherOrder(firstOrderFunc);"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ]
  },
  {
    "Id": "d65d0ec8cd",
    "question": "What is a unary function",
    "answer": "Unary function (i.e. monadic) is a function that accepts exactly one argument. It stands for a single argument accepted by a function.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "For example",
        "code": "const unaryFunction = (a) => console.log(a + 10); // Add 10 to the given argument and display the value"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ]
  },
  {
    "Id": "d65d0ec8cd",
    "question": "What is the currying function",
    "answer": "Currying is the process of taking a function with multiple arguments and turning it into a sequence of functions each with only a single argument. Currying is named after a mathematician Haskell Curry. By applying currying, a n-ary function turns it into a unary function.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Curried functions are great to improve code reusability and functional composition.",
        "code": "const multiArgFunction = (a, b, c) => a + b + c;\nconsole.log(multiArgFunction(1, 2, 3)); // 6\n\nconst curryUnaryFunction = (a) => (b) => (c) => a + b + c;\ncurryUnaryFunction(1); // returns a function: b => c =>  1 + b + c\ncurryUnaryFunction(1)(2); // returns a function: c => 3 + c\ncurryUnaryFunction(1)(2)(3); // returns the number 6"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ]
  },
  {
    "Id": "d65d0ec8cd",
    "question": "What is a pure function",
    "answer": "A Pure function is a function where the return value is only determined by its arguments without any side effects. i.e, If you call a function with the same arguments 'n' number of times and 'n' number of places in the application then it will always return the same value.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Pure functions are important as they simplify unit testing without any side effects and no need for dependency injection. They also avoid tight coupling and make it harder to break your application by not having any side effects. These principles are coming together with Immutability concept of ES6 by giving preference to const over let usage.",
        "code": "//Impure\nlet numberArray = [];\nconst impureAddNumber = (number) => numberArray.push(number);\n//Pure\nconst pureAddNumber = (number) => (argNumberArray) =>\n  argNumberArray.concat([number]);\n\n//Display the results\nconsole.log(impureAddNumber(6)); // returns 1\nconsole.log(numberArray); // returns [6]\nconsole.log(pureAddNumber(7)(numberArray)); // returns [6, 7]\nconsole.log(numberArray); // returns [6]"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ]
  },
  {
    "Id": "d65d0ec8cd",
    "question": "What is the purpose of the let keyword",
    "answer": "The let statement declares a block scope local variable. Hence the variables defined with let keyword are limited in scope to the block, statement, or expression on which it is used. Whereas variables declared with the var keyword used to define a variable globally, or locally to an entire function regardless of block scope.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Let's take an example to demonstrate the usage,",
        "code": "let counter = 30;\nif (counter === 30) {\n  let counter = 31;\n  console.log(counter); // 31\n}\nconsole.log(counter); // 30 (because the variable in if block won't exist here)"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ]
  }
]
