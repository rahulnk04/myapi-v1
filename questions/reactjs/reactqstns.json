[
  {
    "Id": "1e1a97b397",
    "question": "What is React?",
    "answer": "React is an open-source front-end JavaScript library that is used for building user interfaces, especially for single-page applications. It is used for handling view layer for web and mobile apps. React was created by Jordan Walke, a software engineer working for Facebook. React was first deployed on Facebook's News Feed in 2011 and on Instagram in 2012.",
    "codeTrue": false,
    "codes": [{ "codeHead": "", "code": "", "language": "jsx" }],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What are the major features of React?",
    "answer": "The major features of React are:",
    "codeTrue": false,
    "codes": [{ "codeHead": "", "code": "", "language": "jsx" }],
    "bulletsTrue": true,
    "bullets": [
      "It uses VirtualDOM instead of RealDOM considering that RealDOM manipulations are expensive.",
      "Supports server-side rendering.",
      "Follows Unidirectional data flow or data binding.",
      "Uses reusable/composable UI components to develop the view."
    ],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What is JSX?",
    "answer": "JSX is a XML-like syntax extension to ECMAScript (the acronym stands for JavaScript XML). Basically it just provides syntactic sugar for the React.createElement() function, giving us expressiveness of JavaScript along with HTML like template syntax.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "In the example below text inside <h1> tag is returned as JavaScript function to the render function.",
        "code": "class App extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>{\"Welcome to React world!\"}</h1>\n      </div>\n    );\n  }\n}",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What is the difference between Element and Component?",
    "answer": "An Element is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. Elements can contain other Elements in their props. Creating a React element is cheap. Once an element is created, it is never mutated.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "The object representation of React Element would be as follows:",
        "code": "const element = React.createElement(\"div\", { id: \"login-btn\" }, \"Login\");",
        "language": "jsx"
      },
      {
        "codeHead": "The above React.createElement() function returns an object:",
        "code": "{\n  type: \"div\",\n  props: {\n    children: \"Login\",\n    id: \"login-btn\",\n  },\n}",
        "language": "jsx"
      },
      {
        "codeHead": "And finally it renders to the DOM using ReactDOM.render():",
        "code": "<div id='login-btn'>Login</div>",
        "language": "jsx"
      },
      {
        "codeHead": "Whereas a component can be declared in several different ways. It can be a class with a render() method or it can be defined as a function. In either case, it takes props as an input, and returns a JSX tree as the output:",
        "code": "const Button = ({ onLogin }) => (\n  <div id={\"login-btn\"} onClick={onLogin}>\n    Login\n  </div>\n);",
        "language": "jsx"
      },
      {
        "codeHead": "Then JSX gets transpiled to a React.createElement() function tree:",
        "code": "const Button = ({ onLogin }) =>\n  React.createElement(\"div\", { id: \"login-btn\", onClick: onLogin }, \"Login\");",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "How to create components in React?",
    "answer": "There are two possible ways to create a component.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Function Components: This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as the first parameter and return React elements:",
        "code": "function Greeting({ message }) {\n  return <h1>{`Hello, ${message}`}</h1>;\n}\n",
        "language": "jsx"
      },
      {
        "codeHead": "Class Components: You can also use ES6 class to define a component. The above function component can be written as:",
        "code": "class Greeting extends React.Component {\n  render() {\n    return <h1>{`Hello, ${this.props.message}`}</h1>;\n  }\n}\n",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "When to use a Class Component over a Function Component?",
    "answer": "If the component needs state or lifecycle methods then use class component otherwise use function component. However, from React 16.8 with the addition of Hooks, you could use state , lifecycle methods and other features that were only available in class component right in your function component. *So, it is always recommended to use Function components, unless you need a React functionality whose Function component equivalent is not present yet, like Error Boundaries *",
    "codeTrue": false,
    "codes": [{ "codeHead": "", "code": "", "language": "jsx" }],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What are Pure Components?",
    "answer": "React.PureComponent is exactly the same as React.Component except that it handles the shouldComponentUpdate() method for you. When props or state changes, PureComponent will do a shallow comparison on both props and state. Component on the other hand won't compare current props and state to next out of the box. Thus, the component will re-render by default whenever shouldComponentUpdate is called.",
    "codeTrue": false,
    "codes": [{ "codeHead": "", "code": "", "language": "jsx" }],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What is state in React?",
    "answer": "State of a component is an object that holds some information that may change over the lifetime of the component. We should always try to make our state as simple as possible and minimize the number of stateful components.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Let's create a user component with message state,",
        "code": "class User extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: \"Welcome to React world\",\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>{this.state.message}</h1>\n      </div>\n    );\n  }\n}\n",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": true,
    "images": [
      {
        "imageHead": "State is similar to props, but it is private and fully controlled by the component ,i.e., it is not accessible to any other component till the owner component decides to pass it.",
        "image": "https://rahulnk04.github.io/myapi-v1/questions/images/statereactimg.jpg"
      }
    ],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What are props in React?",
    "answer": "Props are inputs to components. They are single values or objects containing a set of values that are passed to components on creation using a naming convention similar to HTML-tag attributes. They are data passed down from a parent component to a child component.\nThe primary purpose of props in React is to provide following component functionality:",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "For example, let us create an element with reactProp property:",
        "code": "<Element reactProp={'1'} />",
        "language": "jsx"
      },
      {
        "codeHead": "This reactProp (or whatever you came up with) name then becomes a property attached to React's native props object which originally already exists on all components created using React library.",
        "code": "props.reactProp",
        "language": "jsx"
      }
    ],
    "bulletsTrue": true,
    "bullets": [
      "Pass custom data to your component.",
      "Trigger state changes.",
      "Use via this.props.reactProp inside component's render() method."
    ],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What is the difference between state and props?",
    "answer": "Both props and state are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. Props get passed to the component similar to function parameters whereas state is managed within the component similar to variables declared within a function.",
    "codeTrue": false,
    "codes": [{ "codeHead": "", "code": "", "language": "jsx" }],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "Why should we not update the state directly?",
    "answer": "When you directly update the state, it does not change this. state immediately. Instead, it creates a pending state transition, and accessing it after calling this method will only return the present value. You will lose control of the state across all components.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "If you try to update the state directly then it won't re-render the component.",
        "code": "//Wrong\n        this.state.message = 'Hello world'",
        "language": "jsx"
      },
      {
        "codeHead": "Instead use setState() method. It schedules an update to a component's state object. When state changes, the component responds by re-rendering.",
        "code": "//Correct\n        this.setState({ message: 'Hello World' })",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What is the difference between HTML and React event handling?",
    "answer": "Below are some of the main differences between HTML and React event handling,",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "In HTML, the event name usually represents in lowercase as a convention:",
        "code": "<button onclick='activateLasers()'>",
        "language": "jsx"
      },
      {
        "codeHead": "Whereas in React it follows camelCase convention:",
        "code": "<button onClick={activateLasers}>",
        "language": "jsx"
      },
      {
        "codeHead": "In HTML, you can return false to prevent default behavior:",
        "code": "<a href='#' onclick='console.log(\"The link was clicked.\"); return false;' />",
        "language": "jsx"
      },
      {
        "codeHead": "Whereas in React you must call preventDefault() explicitly:",
        "code": "function handleClick(event) {\n  event.preventDefault();\n  console.log(\"The link was clicked.\");\n}\n\n",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "How to bind methods or event handlers in JSX callbacks?",
    "answer": "There are 3 possible ways to achieve this:",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Binding in Constructor: In JavaScript classes, the methods are not bound by default. The same thing applies for React event handlers defined as class methods. Normally we bind them in constructor.",
        "code": "class Foo extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    console.log(\"Click happened\");\n  }\n  render() {\n    return <button onClick={this.handleClick}>Click Me</button>;\n  }\n}\n",
        "language": "jsx"
      },
      {
        "codeHead": "Public class fields syntax: If you don't like to use bind approach then public class fields syntax can be used to correctly bind callbacks.",
        "code": "handleClick = () => {\n  console.log(\"this is:\", this);\n};\n<button onClick={this.handleClick}>{\"Click me\"}</button>;\n",
        "language": "jsx"
      },
      {
        "codeHead": "Arrow functions in callbacks: You can use arrow functions directly in the callbacks.",
        "code": "handleClick() {\n          console.log('Click happened');\n      }\n      render() {\n          return <button onClick={() => this.handleClick()}>Click Me</button>;\n      }",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "How to pass a parameter to an event handler or callback?",
    "answer": "There are multiple possible ways to achieve this:",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "You can use an arrow function to wrap around an event handler and pass parameters:",
        "code": "<button onClick={() => this.handleClick(id)} />",
        "language": "jsx"
      },
      {
        "codeHead": "above is an equivalent to calling .bind:",
        "code": "<button onClick={this.handleClick.bind(this, id)} />",
        "language": "jsx"
      },
      {
        "codeHead": "Apart from these two approaches, you can also pass arguments to a function which is defined as arrow function",
        "code": "<button onClick={this.handleClick(id)} />;\n\nhandleClick = (id) => () => {\n  console.log(\"Hello, your ticket number is\", id);\n};",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What are synthetic events in React?",
    "answer": "SyntheticEvent is a cross-browser wrapper around the browser's native event.\nIt's API is same as the browser's native event, including stopPropagation() and preventDefault(), except the events work identically across all browsers",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Example",
        "code": "function ActionLink() {  \n    function handleClick(e) {  \n        e.preventDefault();  \n        console.log('You had clicked a Link.');  \n    }  \n    return (  \n        <a href=\"#\" onClick={handleClick}>  \n              Click_Me  \n        </a>  \n    );  \n}",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What are inline conditional expressions?",
    "answer": "You can use either if statements or ternary expressions which are available from JS to conditionally render expressions. Apart from these approaches, you can also embed any expressions in JSX by wrapping them in curly braces and then followed by JS logical operator &&.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Example",
        "code": "import React from \"react\";\n\nconst myComponent = () => {\n  const [messages, setMessages] = React.useState([\"Rahul\", \"Ranjan\", \"Nayak\"]);\n  const [isLogin, setisLogin] = React.useState(true);\n  return (\n    <React.Fragment>\n      <h1>Hello!</h1>\n      {messages.length > 0 && !isLogin ? (\n        <h2>You have {messages.length} unread messages.</h2>\n      ) : (\n        <h2>You don't have unread messages.</h2>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default myComponent;",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What is \"key\" prop and what is the benefit of using it in arrays of elements?",
    "answer": "A key is a special string attribute you should include when creating arrays of elements. Key prop helps React identify which items have changed, are added, or are removed.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Most often we use ID from our data as key:",
        "code": "import React from \"react\";\n\nconst myComponent = () => {\n  const Employees = [\n    {\n      uniqueID: \"265431\",\n      name: \"Rahul Ranjan Nayak\",\n      role: \"Full Stack Developer\",\n    },\n    {\n      uniqueID: \"290435\",\n      name: \"Suchismita Sahoo\",\n      role: \"SASS Admin Developer\",\n    },\n  ];\n  return (\n    <React.Fragment>\n      {Employees.map((employee) => (\n        <li key={employee.uniqueID}>\n          {employee.name} is a {employee.role}\n        </li>\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport default myComponent;",
        "language": "jsx"
      },
      {
        "codeHead": "When you don't have stable IDs for rendered items, you may use the item index as a key as a last resort:",
        "code": "import React from \"react\";\n\nconst myComponent = () => {\n  const Employees = [\n    {\n      name: \"Rahul Ranjan Nayak\",\n      role: \"Full Stack Developer\",\n    },\n    {\n      name: \"Suchismita Sahoo\",\n      role: \"SASS Admin Developer\",\n    },\n  ];\n  return (\n    <React.Fragment>\n      {Employees.map((employee, index) => (\n        <li key={index}>\n          {employee.name} is a {employee.role}\n        </li>\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport default myComponent;",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What is the use of refs?",
    "answer": "The ref is used to return a reference to the element. They should be avoided in most cases, however, they can be useful when you need a direct access to the DOM element or an instance of a component.",
    "codeTrue": false,
    "codes": [
      {
        "codeHead": "",
        "code": "",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "How to create refs?",
    "answer": "There are multiple approach to create refs in react",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "with the help of createRef hook",
        "code": "import React from \"react\";\n\nconst App = () => {\n  const textInputRef = React.createRef();\n  const textInputFocusHandler = () => {\n    textInputRef.current.focus();\n  };\n\n  return (\n    <React.Fragment>\n      <input ref={textInputRef} type=\"text\" placeholder=\"Enter something\" />\n      <button onClick={textInputFocusHandler}>Click me to focus input</button>\n    </React.Fragment>\n  );\n};\n\nexport default App;",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What are forward refs?",
    "answer": "Ref forwarding is a feature that lets some components take a ref they receive, and pass it further down to a child.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "with the help of createRef hook",
        "code": "import React from \"react\";\n\nconst App = () => {\n  const ref = React.createRef();\n\n  const ButtonElement = React.forwardRef((props, ref) => (\n    <button ref={ref} className=\"CustomButton\">\n      {props.children}\n    </button>\n  ));\n\n  return (\n    <React.Fragment>\n      <ButtonElement ref={ref}>{\"Forward Ref\"}</ButtonElement>\n    </React.Fragment>\n  );\n};\n\nexport default App;",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What is Virtual DOM?",
    "answer": "The Virtual DOM (VDOM) is an in-memory representation of Real DOM. The representation of a UI is kept in memory and synced with the \"real\" DOM. It's a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called reconciliation.",
    "codeTrue": false,
    "codes": [
      {
        "codeHead": "",
        "code": "",
        "language": "jsx"
      }
    ],
    "bulletsTrue": true,
    "bullets": [
      "A virtual DOM is a simple JavaScript object that is the exact copy of the corresponding real DOM.",
      "It can be considered as a node tree that consists of elements, their attributes, and other properties.",
      "Using the render function in React, it creates a node tree and updates it based on the changes that occur in the data model.",
      "These changes are usually triggered by users, or the actions caused by the system."
    ],
    "imageTrue": false,
    "images": [{ "imageHead": "", "image": "" }],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "How Virtual DOM works?",
    "answer": "The Virtual DOM works in three simple steps",
    "codeTrue": false,
    "codes": [
      {
        "codeHead": "",
        "code": "",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": true,
    "images": [
      {
        "imageHead": "Whenever any underlying data changes, the entire UI is re-rendered in Virtual DOM representation.",
        "image": "https://rahulnk04.github.io/myapi-v1/questions/images/vdom1.png"
      },
      {
        "imageHead": "Then the difference between the previous DOM representation and the new one is calculated.",
        "image": "https://rahulnk04.github.io/myapi-v1/questions/images/vdom2.png"
      },
      {
        "imageHead": "Once the calculations are done, the real DOM will be updated with only the things that have actually changed.",
        "image": "https://rahulnk04.github.io/myapi-v1/questions/images/vdom3.png"
      }
    ],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What is the difference between Shadow DOM and Virtual DOM?",
    "answer": "The Shadow DOM is a browser technology designed primarily for scoping variables and CSS in web components.\nThe Virtual DOM is a concept implemented by libraries in JavaScript on top of browser APIs.",
    "codeTrue": false,
    "codes": [
      {
        "codeHead": "",
        "code": "",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ],
    "hasTable": true,
    "table": {
      "tableHead": [
        { "path": "virtualdom", "name": "Virtual DOM" },
        { "path": "shadowdom", "name": "Shadow  DOM" }
      ],
      "tableBody": [
        {
          "virtualdom": "It revolves around solving performance issues.",
          "shadowdom": "It revolves around the concept of encapsulation."
        },
        {
          "virtualdom": "It is a complete representation of an actual DOM.",
          "shadowdom": "It is not a complete representation of the entire DOM."
        },
        {
          "virtualdom": "It groups together several changes and does a single re-render instead of many small ones.",
          "shadowdom": "It adds a subtree of DOM elements into the rendering of a document, instead of adding it to the main document’s DOM tree."
        },
        {
          "virtualdom": "It creates a copy of the whole DOM object.",
          "shadowdom": "It creates small pieces of the DOM object having their own, isolated scope."
        },
        {
          "virtualdom": "It does not isolate the DOM.",
          "shadowdom": "It isolates the DOM."
        },
        {
          "virtualdom": "It does not help with CSS scoping.",
          "shadowdom": "It helps with CSS scoping."
        }
      ]
    }
  },
  {
    "Id": "1e1a97b397",
    "question": "What is React Fiber and what are the main goals of React Fiber?",
    "answer": "Fiber is the new reconciliation engine or reimplementation of core algorithm in React v16. The goal of React Fiber is to increase its suitability for areas like animation, layout, gestures, ability to pause, abort, or reuse work and assign priority to different types of updates; and new concurrency primitives.\n\nThe goal of React Fiber is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is incremental rendering: the ability to split rendering work into chunks and spread it out over multiple frames.",
    "codeTrue": false,
    "codes": [
      {
        "codeHead": "",
        "code": "",
        "language": "jsx"
      }
    ],
    "bulletsTrue": true,
    "bullets": [
      "Ability to split interruptible work in chunks.",
      "Ability to prioritize, rebase and reuse work in progress.",
      "Ability to yield back and forth between parents and children to support layout in React.",
      "Ability to return multiple elements from render().",
      "Better support for error boundaries."
    ],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What are controlled components?",
    "answer": "In React, Controlled Components are those in which form’s data is handled by the component’s state. It takes its current value through props and makes changes through callbacks like onClick, onChange, etc. A parent component manages its own state and passes the new values as props to the controlled component.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Example",
        "code": "import React from \"react\";\n\nconst App = () => {\n  const [name, setName] = React.useState(\"\");\n\n  const handleSubmit = () => {\n    alert(`Name: ${name}`);\n  };\n\n  return (\n    <React.Fragment>\n      <h3>Controlled Component</h3>\n      <form onSubmit={handleSubmit}>\n        <label>Name:</label>\n        <input\n          name=\"name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default App;",
        "language": "jsx"
      }
    ],
    "bulletsTrue": true,
    "bullets": [
      "We are creating a simple form that comprises an input field with a label name and a submit button. We are creating an onSubmit function that triggers when we submit the form which shows the name that we have filled in the alert box.",
      "We are creating a state name that stores the value we enter into the input field using the useState hook.",
      "We are creating an onChange function in the input field that stores the data we are entering in the input field to our state.",
      "There is another function handleSumit that gets triggered when we submit the form and it shows the name we have entered on the alert box."
    ],
    "imageTrue": true,
    "images": [
      {
        "imageHead": "Output",
        "image": "https://rahulnk04.github.io/myapi-v1/questions/images/controlledCompReact.PNG"
      }
    ],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What are uncontrolled components?",
    "answer": "Uncontrolled Components are the components that are not controlled by the React state and are handled by the DOM (Document Object Model). So in order to access any value that has been entered we take the help of refs.\n\nFor instance, if we want to add a file as an input, this cannot be controlled as this depends on the browser so this is an example of an uncontrolled input.",
    "codeTrue": true,
    "codes": [
      {
        "codeHead": "Example",
        "code": "import React from \"react\";\n\nconst App = () => {\n  const inputRef = React.useRef(null);\n\n  const handleSubmit = () => {\n    alert(`Name: ${inputRef.current.value}`);\n  };\n\n  return (\n    <React.Fragment>\n      <h3>Uncontrolled Component</h3>\n      <form onSubmit={handleSubmit}>\n        <label>Name :</label>\n        <input type=\"text\" name=\"name\" ref={inputRef} />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n",
        "language": "jsx"
      }
    ],
    "bulletsTrue": true,
    "bullets": [
      "We are creating a simple form that comprises an input field with a label name and a submit button. We are creating an onSubmit function that triggers when we submit the form which shows the name that we have filled in the alert box.",
      "We are accessing the name we have filled using useRef."
    ],
    "imageTrue": true,
    "images": [
      {
        "imageHead": "Output",
        "image": "https://rahulnk04.github.io/myapi-v1/questions/images/uncontrolledCompReact.PNG"
      }
    ],
    "hasTable": false,
    "table": { "tableHead": [{ "path": "", "name": "" }], "tableBody": [{}] }
  },
  {
    "Id": "1e1a97b397",
    "question": "What is the difference between Controlled and Uncontrolled Components?",
    "answer": "Difference is shown in the tabular form below.",
    "codeTrue": false,
    "codes": [
      {
        "codeHead": "",
        "code": "",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ],
    "hasTable": true,
    "table": {
      "tableHead": [
        { "path": "controlled", "name": "Controlled  Component" },
        { "path": "uncontrolled", "name": "Uncontrolled Component" }
      ],
      "tableBody": [
        {
          "controlled": "The component is under control of the component’s state.",
          "uncontrolled": "Components are under the control of DOM."
        },
        {
          "controlled": "These components are predictable as are controlled by the state of the component.",
          "uncontrolled": "Are Uncontrolled because during the life cycle methods the data may loss."
        },
        {
          "controlled": "Internal state is not maintained.",
          "uncontrolled": "Internal state is maintained."
        },
        {
          "controlled": "It accepts the current value as props.",
          "uncontrolled": "We access the values using refs."
        },
        {
          "controlled": "Does not maintain its internal state.",
          "uncontrolled": "Maintains its internal state."
        },
        {
          "controlled": "Controlled by the parent component.",
          "uncontrolled": "Controlled by the DOM itself."
        },
        {
          "controlled": "Have better control on the form data and values.",
          "uncontrolled": "Has very limited control over form values and data."
        }
      ]
    }
  },
  {
    "Id": "1e1a97b397",
    "question": "What is the difference between createElement and cloneElement?",
    "answer": "JSX elements will be transpiled to React.createElement() functions to create React elements which are going to be used for the object representation of UI. Whereas cloneElement is used to clone an element and pass it new props.",
    "codeTrue": false,
    "codes": [
      {
        "codeHead": "",
        "code": "",
        "language": "jsx"
      }
    ],
    "bulletsTrue": false,
    "bullets": [],
    "imageTrue": false,
    "images": [
      {
        "imageHead": "",
        "image": ""
      }
    ],
    "hasTable": true,
    "table": {
      "tableHead": [
        { "path": "createElement", "name": "cloneElement()" },
        { "path": "cloneElement", "name": "cloneElement()" }
      ],
      "tableBody": [
        {
          "createElement": "createElement is the code that JSX gets compiled or converted into and is used by reacting to create elements.",
          "cloneElement": "cloneElement is used for cloning elements and passing them new props."
        },
        {
          "createElement": "This method is used to describe how the User Interface looks.",
          "cloneElement": "This method is used to manipulate the elements."
        },
        {
          "createElement": "createElement requires type, props, and children as arguments.",
          "cloneElement": "cloneElement requires elements, props, and children as arguments."
        },
        {
          "createElement": "It creates and returns a new element with the type as given in the arguments.",
          "cloneElement": "It clones and returns a new element with the properties of a given element."
        }
      ]
    }
  }
]
